Programming Assignments
=======================


Assignment 1: Due October 6
----------------------------

Goal: get familiar with Google Colab

You will work with the example code in `this Colab notebook <https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/quickstart/beginner.ipynb>`_. You should:

* Verify that you can run the notebook on Google Colab
* Perform runs with GPU, TPU, and CPU
* Measure and report performance in each case, in terms of execution time and accuracy achieved
* Repeat this process for three different networks: e.g., add additional dense layers, use different 

Assignment 2: Due October 20
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Goal: Gain experience evaluating the performance of models, frameworks and
hardware architectures

* Pick two frameworks (e.g., TensorFlow, Pytorch , Mxnet, PlaidML , CNTK, Keras/X, Keras/Y)
* Pick two different models (e.g., VGG, ResNet, MobileNet) for which pretrained version of ImageNet are available
* Build a custom version of the `Kaggle cats-and-dogs classification problem <https://www.kaggle.com/c/dogs-vs-cats>`_ (which re-trains known image models) on some classification task of your choice.
* You have to choose some image topics to gather for classification using the retuned model(s)
* Measure the performance of training *and* inference of the models (for two different models (e.g., vgg vs. resnet) and two different frameworks (e.g. TF vs Pytorch) on CPU, GPU and TPU or something else (e.g., your laptop; goal is to compare two different platforms to CPUs for a total of three platforms)
* Write up: Explain and account for the performance differences in terms of architecture elements, software stack, framework implementation strategy, and model structure



Assignment 2: Due October 13
----------------------------

You are given a dataset, ``combined_rnaseq_data_lincs1000_combat``, of expression levels for 942 different genes (columns) in 15197 different cancer samples (rows). 
We want to determine to what extent the data for one gene can be predicted given the values for the 941 others.
Your task is to use Keras to build such a predictive model.

In this `Google Drive folder <https://drive.google.com/drive/folders/1-jkm2bUYWOftKm8is6rx3dKP9UIz2hCC?usp=sharing>`_ you will find:

* ``combined_rnaseq_data_lincs1000_combat``: A file with 15198 rows, each with 943 tab-separated columns: the data
* ``Assignment-1.ipynb``: A notebook that shows how to connect to, and access, your UChicago Google Drive, and then define and run a simple Keras model.

Proceed as follows:

1. Use `Random.Org <https://www.random.org/integers/>`_ to generate 3 random numbers in the range 2..941 (inclusive). These 3 numbers plus the numbers [0,1] together identify the 5 genes for which you will construct models. (For example, if you obtain random numbers 56, 452, and 593, then you want to compute on genes [0, 1, 56, 452, 593], i.e., the columns of the same number in the ``data`` array of ``Assignment-1.ipynb``.)

2. Make sure that you can run the code in ``Assignment-1.ipynb`` on Google Colaboratory. Use TensorBoard to study its progress.

3. For each of your 5 genes, experiment with different hyperparameters to find a set that generate a low ``val_losss``. 

4. Submit a file containing six lines:

   a. First, the URL for an ASCII text file containing a brief description of what you tried and what you learned. What hyperparameters did you vary? Which proved important? Did you find that the same model worked well for all genes?

   b. Then, five lines, one for each of your genes, each with the form

      <*gene-number*>, <*val-loss*>, <*URL-for-model*>, <*URL-for-history*>

      where:

      -  <*gene-number*> is an integer gene number

      -  <*val-loss*> is the best validation loss that you achievedd

      -  <*URL-for-model*> allows us to access a Google Drive file containing Python code for the model used to generate the <val-loss>. (You may name one model for all 5 genes, or a different model for each.)

      -  <*URL-for-history*> allows us to access a Google Drive file containing the execution trace for the run that achieved the reported val-loss

We will add an example of the desired output soon.
